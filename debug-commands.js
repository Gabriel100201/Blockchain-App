// Script de comandos de depuraci√≥n para la consola del navegador
// Copiar y pegar directamente en la consola despu√©s de conectar MetaMask

// ABI del contrato Mentorium actualizado
const MENTORIUM_ABI = [
  "function owner() view returns (address)",
  "function roles(address) view returns (uint8)",
  "function balances(address) view returns (uint256)",
  "function getBalance(address user) view returns (uint256)",
  "function setRole(address user, uint256 roleIndex) external",
  "function assignTokens(address to, uint256 amount) external"
];

// Direcci√≥n del contrato desplegado
const CONTRACT_ADDRESS = "0xb64be4F86739eb3A85B1B2A8f6E1036B14d356fD";

// Roles del smart contract actualizado
const ContractRole = {
  None: 0,
  Estudiante: 1,
  Docente: 2,
  Admin: 3
};

// Funci√≥n para obtener informaci√≥n del usuario actual
async function getUserInfo() {
  console.log('üîç === INFORMACI√ìN DEL USUARIO ===');

  if (!window.ethereum) {
    console.error('‚ùå MetaMask no est√° instalado');
    return;
  }

  try {
    // Obtener cuenta conectada
    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts'
    });

    if (!accounts || accounts.length === 0) {
      console.error('‚ùå No hay cuenta conectada');
      return;
    }

    const userAddress = accounts[0];
    console.log('üë§ Direcci√≥n del usuario:', userAddress);

    // Crear provider y signer
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    const contract = new ethers.Contract(CONTRACT_ADDRESS, MENTORIUM_ABI, signer);

    // Obtener informaci√≥n del contrato
    const owner = await contract.owner();
    const role = await contract.roles(userAddress);
    const balance = await contract.getBalance(userAddress);

    console.log('\nüìä INFORMACI√ìN DEL CONTRATO:');
    console.log(`üëë Owner: ${owner}`);
    console.log(`üë§ Tu direcci√≥n: ${userAddress}`);
    console.log(`üîç ¬øEres owner? ${owner.toLowerCase() === userAddress.toLowerCase()}`);
    console.log(`üé≠ Rol en contrato: ${role} (${getRoleName(role)})`);
    console.log(`üí∞ Balance en contrato: ${balance} tokens`);

    // Mapeo esperado seg√∫n el contexto
    const expectedMapping = {
      0: 'student (None)',
      1: 'student (Estudiante)',
      2: 'docente (Docente)',
      3: 'admin (Admin)'
    };

    console.log(`üì± Rol esperado en app: ${expectedMapping[role] || 'Desconocido'}`);

    return {
      address: userAddress,
      owner,
      role: Number(role),
      balance: Number(balance),
      isOwner: owner.toLowerCase() === userAddress.toLowerCase()
    };

  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n:', error);
    return null;
  }
}

// Funci√≥n para obtener el nombre del rol
function getRoleName(role) {
  const roles = {
    0: 'None',
    1: 'Estudiante',
    2: 'Docente',
    3: 'Admin'
  };
  return roles[role] || 'Desconocido';
}

// Funci√≥n para asignar rol a una direcci√≥n (solo owner)
async function setRoleForAddress(address, roleIndex) {
  console.log(`üîß === ASIGNANDO ROL ===`);
  console.log(`üìç Direcci√≥n: ${address}`);
  console.log(`üé≠ Rol: ${roleIndex} (${getRoleName(roleIndex)})`);

  if (!window.ethereum) {
    console.error('‚ùå MetaMask no est√° instalado');
    return;
  }

  try {
    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts'
    });

    if (!accounts || accounts.length === 0) {
      console.error('‚ùå No hay cuenta conectada');
      return;
    }

    const userAddress = accounts[0];
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    const contract = new ethers.Contract(CONTRACT_ADDRESS, MENTORIUM_ABI, signer);

    // Verificar si el usuario es owner
    const owner = await contract.owner();
    if (owner.toLowerCase() !== userAddress.toLowerCase()) {
      console.error('‚ùå Solo el owner puede asignar roles');
      return;
    }

    console.log('‚úÖ Eres el owner, procediendo con la asignaci√≥n...');

    // Ejecutar la transacci√≥n
    const tx = await contract.setRole(address, roleIndex);
    console.log('‚è≥ Transacci√≥n enviada:', tx.hash);

    await tx.wait();
    console.log('‚úÖ Rol asignado exitosamente');

    // Verificar el nuevo rol
    const newRole = await contract.roles(address);
    console.log(`üé≠ Nuevo rol de ${address}: ${newRole} (${getRoleName(newRole)})`);

  } catch (error) {
    console.error('‚ùå Error asignando rol:', error);
  }
}

// Funci√≥n para asignar tokens (solo docentes/admin)
async function assignTokensToAddress(address, amount) {
  console.log(`üí∞ === ASIGNANDO TOKENS ===`);
  console.log(`üìç Direcci√≥n: ${address}`);
  console.log(`üíé Cantidad: ${amount} MTM`);

  if (!window.ethereum) {
    console.error('‚ùå MetaMask no est√° instalado');
    return;
  }

  try {
    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts'
    });

    if (!accounts || accounts.length === 0) {
      console.error('‚ùå No hay cuenta conectada');
      return;
    }

    const userAddress = accounts[0];
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    const contract = new ethers.Contract(CONTRACT_ADDRESS, MENTORIUM_ABI, signer);

    // Verificar rol del usuario
    const role = await contract.roles(userAddress);
    if (role != 2 && role != 3) {
      console.error('‚ùå Solo docentes y admins pueden asignar tokens');
      return;
    }

    console.log('‚úÖ Tienes permisos para asignar tokens');

    // Ejecutar la transacci√≥n
    const tx = await contract.assignTokens(address, amount);
    console.log('‚è≥ Transacci√≥n enviada:', tx.hash);

    await tx.wait();
    console.log('‚úÖ Tokens asignados exitosamente');

    // Verificar el nuevo balance
    const newBalance = await contract.getBalance(address);
    console.log(`üí∞ Nuevo balance de ${address}: ${newBalance} MTM`);

  } catch (error) {
    console.error('‚ùå Error asignando tokens:', error);
  }
}

// Funci√≥n para verificar el contexto de React
function checkReactContext() {
  console.log('üì± === VERIFICANDO CONTEXTO DE REACT ===');

  // Intentar acceder al contexto de React
  const reactRoot = document.querySelector('[data-reactroot]');
  if (reactRoot) {
    console.log('‚úÖ React est√° montado');

    // Buscar elementos que muestren el rol
    const roleElements = document.querySelectorAll('[class*="role"], [class*="Role"]');
    console.log(`üîç Elementos con "role" en clase: ${roleElements.length}`);

    // Buscar texto que contenga "student", "docente", "admin"
    const bodyText = document.body.innerText;
    const roleMatches = bodyText.match(/(student|docente|admin)/gi);
    if (roleMatches) {
      console.log('üìù Texto encontrado en la p√°gina:', roleMatches);
    }
  } else {
    console.log('‚ùå React no est√° montado');
  }
}

// Funci√≥n para forzar la recarga del rol en la app
async function forceReloadRoleInApp() {
  console.log('üîÑ === FORZANDO RECARGA DEL ROL ===');

  // Verificar si la funci√≥n forceReloadRole est√° disponible
  if (typeof window.forceReloadRole === 'function') {
    console.log('‚úÖ Funci√≥n forceReloadRole encontrada, ejecutando...');
    await window.forceReloadRole();
  } else {
    console.log('‚ùå Funci√≥n forceReloadRole no encontrada');
    console.log('üí° Intenta recargar la p√°gina o reconectar la wallet');
  }
}

// Funci√≥n principal de diagn√≥stico
async function debugRole() {
  console.log('üöÄ === DIAGN√ìSTICO COMPLETO DE ROL ===');

  const userInfo = await getUserInfo();
  if (!userInfo) return;

  console.log('\nüîÑ === VERIFICANDO SINCRONIZACI√ìN ===');
  checkReactContext();

  console.log('\nüí° === RECOMENDACIONES ===');

  if (userInfo.role == 0) {
    console.log('1. Tu rol es NONE - necesitas que te asignen un rol');
    console.log('2. Ejecuta: setRoleForAddress("TU_DIRECCION", 2) para ser docente');
  } else if (userInfo.role == 1) {
    console.log('1. Tu rol es ESTUDIANTE - necesitas ser promovido a docente');
    console.log('2. Ejecuta: setRoleForAddress("TU_DIRECCION", 2) para ser docente');
  } else if (userInfo.role == 2 || userInfo.role == 3) {
    console.log('1. Tu rol en el contrato es correcto (DOCENTE/ADMIN)');
    console.log('2. El problema est√° en la sincronizaci√≥n de la app');
    console.log('3. Ejecuta: forceReloadRoleInApp()');
    console.log('4. O recarga la p√°gina y reconecta la wallet');
  }
}

// Exponer funciones globalmente
window.getUserInfo = getUserInfo;
window.setRoleForAddress = setRoleForAddress;
window.assignTokensToAddress = assignTokensToAddress;
window.checkReactContext = checkReactContext;
window.forceReloadRoleInApp = forceReloadRoleInApp;
window.debugRole = debugRole;

console.log('üöÄ Script de comandos de depuraci√≥n cargado');
console.log('üìù Comandos disponibles:');
console.log('  - getUserInfo() - Obtener informaci√≥n del usuario');
console.log('  - setRoleForAddress(address, roleIndex) - Asignar rol');
console.log('  - assignTokensToAddress(address, amount) - Asignar tokens');
console.log('  - checkReactContext() - Verificar contexto de React');
console.log('  - forceReloadRoleInApp() - Forzar recarga del rol');
console.log('  - debugRole() - Diagn√≥stico completo'); 